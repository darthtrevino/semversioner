name: Build Test and Deploy (master)

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11' ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - name: Lint code
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --show-source --statistics
        mypy semversioner tests
    - name: Build and test
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
        pytest --junitxml="test-reports/test-report.xml"
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.7'
    - name: Publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install -r requirements-dev.txt
        pip install semversioner==1.4.1

        previous_version=$(semversioner current-version)
        semversioner release
        new_version=$(semversioner current-version)
        semversioner changelog > CHANGELOG.md
        echo "Replace version '$previous_version' to '$new_version' in __version__.py ..."
        echo "__version__ = '$new_version'" > semversioner/__version__.py

        python setup.py sdist bdist_wheel
        twine upload dist/*
        
        git config --global user.name 'Semversioner Bot'
        git config --global user.email 'semversioner@users.noreply.github.com'
        git add .
        git commit -m "Update files for new version '${new_version}' [skip ci]"
        git push origin master
        
        git tag -a -m "Tagging for release ${new_version}" "${new_version}"
        git push origin ${new_version}
